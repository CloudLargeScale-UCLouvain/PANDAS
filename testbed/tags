!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddErrorReceived	metrics.go	/^func (m *MessageGlobalMetrics) AddErrorReceived() {$/;"	f
AddErrorSend	metrics.go	/^func (m *MessageGlobalMetrics) AddErrorSend() {$/;"	f
AddNeighbor	searchtable.go	/^func (st *SearchTable) AddNeighbor(n *Neighbor) {$/;"	f
AddPendingRequest	storage.go	/^func (s *Storage) AddPendingRequest(streamManager *PeerStreamManager, addr string, sampleID int, messageType MessageType) {$/;"	f
AddPendingRequest	stream.go	/^func (pm *PeerStreamManager) AddPendingRequest(addr string, sampleID int, messageType MessageType) {$/;"	f
AddReceived	metrics.go	/^func (m *MessageGlobalMetrics) AddReceived() {$/;"	f
AddSamplesIHave	storage.go	/^func (s *Storage) AddSamplesIHave(samples []int) {$/;"	f
AddSamplesIMiss	storage.go	/^func (s *Storage) AddSamplesIMiss(samples []int) {$/;"	f
AddSend	metrics.go	/^func (m *MessageGlobalMetrics) AddSend() {$/;"	f
AddrUDP	neighbor.go	/^func (n *Neighbor) AddrUDP() string {$/;"	f
BANDWIDTH_LIMIT_BYTES_PER_SEC	main.go	/^var BANDWIDTH_LIMIT_BYTES_PER_SEC = 125000000 \/\/ 1Gbps in bytes per second$/;"	v
BLOCK_DIM	main.go	/^const BLOCK_DIM = 512$/;"	c
BLOCK_TIME	main.go	/^const BLOCK_TIME = 12         \/\/ block time = 12 seconds$/;"	c
Block	sample/block.go	/^type Block struct {$/;"	t
CheckForUnHostedSamples	builder.go	/^func CheckForUnHostedSamples(curreBlock *sample.Block, validators map[string]*Neighbor) map[int]struct{} {$/;"	f
ComputeRegionRadius	sample/block.go	/^func (b *Block) ComputeRegionRadius(numberOfCopiesPerSample int, numValidators int) *big.Int {$/;"	f
ComputeRegionRadiusWithNumNodes	sample/block.go	/^func (b *Block) ComputeRegionRadiusWithNumNodes(numberOfCopiesPerSample int) *big.Int {$/;"	f
Config	main.go	/^type Config struct {$/;"	t
CreateParcelLog	metrics.go	/^func CreateParcelLog(colRow int, block int, size int, first int, timestamp int64) *ParcelLog {$/;"	f
CreatePubSub	header.go	/^func CreatePubSub(h host.Host, ctx context.Context, LogDirectory string, NickFlag string) (*Pub, error) {$/;"	f
Descriptor	protobuf/message.pb.go	/^func (*Message) Descriptor() ([]byte, []int) {$/;"	f
Equals	neighbor.go	/^func (n *Neighbor) Equals(other interface{}) bool {$/;"	f
EventCode	logging.go	/^type EventCode int$/;"	t
Expired	neighbor.go	/^func (n *Neighbor) Expired(ttl time.Duration) bool {$/;"	f
File_message_proto	protobuf/message.pb.go	/^var File_message_proto protoreflect.FileDescriptor$/;"	v
GetFreshestKNeighbours	searchtable.go	/^func (st *SearchTable) GetFreshestKNeighbours(k int) []*Neighbor {$/;"	f
GetIDByColumn	sample/sample.go	/^func (s *Sample) GetIDByColumn() *big.Int {$/;"	f
GetIDByRow	sample/sample.go	/^func (s *Sample) GetIDByRow() *big.Int {$/;"	f
GetMessageType	protobuf/message.pb.go	/^func (x *Message) GetMessageType() int32 {$/;"	f
GetNRandomSamples	sample/block.go	/^func (b *Block) GetNRandomSamples(n int) []*Sample {$/;"	f
GetNeighborsBySample	searchtable.go	/^func (st *SearchTable) GetNeighborsBySample(sampleId *big.Int, radius *big.Int) []*Neighbor {$/;"	f
GetOrCreateStream	stream.go	/^func (pm *PeerStreamManager) GetOrCreateStream(ctx context.Context, peerInfo *peer.AddrInfo) (network.Stream, error) {$/;"	f
GetPeers	protobuf/message.pb.go	/^func (x *Message) GetPeers() []string {$/;"	f
GetPendingRequestsMap	storage.go	/^func (s *Storage) GetPendingRequestsMap(streamManager *PeerStreamManager) map[string]map[int]MessageType {$/;"	f
GetRandomSample	sample/block.go	/^func (b *Block) GetRandomSample() *Sample {$/;"	f
GetSampleIDsByRow	protobuf/message.pb.go	/^func (x *Message) GetSampleIDsByRow() []int64 {$/;"	f
GetSamples	protobuf/message.pb.go	/^func (x *Message) GetSamples() []byte {$/;"	f
GetSamplesByColumn	sample/block.go	/^func (b *Block) GetSamplesByColumn(column int) []*Sample {$/;"	f
GetSamplesByRow	sample/block.go	/^func (b *Block) GetSamplesByRow(row int) []*Sample {$/;"	f
GetSamplesIHaveCount	storage.go	/^func (s *Storage) GetSamplesIHaveCount() int {$/;"	f
GetSamplesIHaveMap	storage.go	/^func (s *Storage) GetSamplesIHaveMap() map[int]struct{} {$/;"	f
GetSamplesIMissCount	storage.go	/^func (s *Storage) GetSamplesIMissCount() int {$/;"	f
GetSamplesIMissList	storage.go	/^func (s *Storage) GetSamplesIMissList() []int {$/;"	f
GetSamplesIMissMap	storage.go	/^func (s *Storage) GetSamplesIMissMap() map[int]struct{} {$/;"	f
GetSenderID	protobuf/message.pb.go	/^func (x *Message) GetSenderID() string {$/;"	f
HeaderMessage	header.go	/^type HeaderMessage struct {$/;"	t
HeaderPublish	header.go	/^func (p *Pub) HeaderPublish(blockID int) error {$/;"	f
HeaderReceived	logging.go	/^	HeaderReceived$/;"	c
HeaderSent	logging.go	/^	HeaderSent EventCode = iota$/;"	c
InitMessageMetrics	metrics.go	/^func InitMessageMetrics(nodeRole string, nick string) *MessageGlobalMetrics {$/;"	f
IsFresherThan	neighbor.go	/^func (n *Neighbor) IsFresherThan(other *Neighbor) bool {$/;"	f
IsInRegion	sample/sample.go	/^func (s *Sample) IsInRegion(peerID, radius *big.Int) bool {$/;"	f
IsInRegionByColumn	sample/sample.go	/^func (s *Sample) IsInRegionByColumn(lowerBound, upperBound *big.Int) bool {$/;"	f
IsInRegionByRow	sample/sample.go	/^func (s *Sample) IsInRegionByRow(lowerBound, upperBound *big.Int) bool {$/;"	f
LogEntry	logging.go	/^type LogEntry struct {$/;"	t
LogEvent	logging.go	/^type LogEvent struct {$/;"	t
LogMessageCount	logging.go	/^type LogMessageCount struct {$/;"	t
MAX_SAMPLES_PER_PACKET	main.go	/^const MAX_SAMPLES_PER_PACKET = 20$/;"	c
MAX_SAMPLE_REQUESTS_PER_PACKET	main.go	/^const MAX_SAMPLE_REQUESTS_PER_PACKET = 70$/;"	c
MaddrToPeerID	neighbor.go	/^func MaddrToPeerID(ma string, nick string, role string) *big.Int {$/;"	f
MaxKey	sample/block.go	/^var MaxKey *big.Int$/;"	v
Message	message.go	/^type Message struct {$/;"	t
Message	protobuf/message.pb.go	/^type Message struct {$/;"	t
MessageGlobalMetrics	metrics.go	/^type MessageGlobalMetrics struct {$/;"	t
MessageType	message.go	/^type MessageType int$/;"	t
NUM_COLS_TO_SAMPLE	main.go	/^const NUM_COLS_TO_SAMPLE = 2  \/\/ number of rows to sample$/;"	c
NUM_ID_BITS	sample/block.go	/^const NUM_ID_BITS = 256$/;"	c
NUM_RANDOM_SAMPLES	main.go	/^const NUM_RANDOM_SAMPLES = 73 \/\/ number of random samples$/;"	c
NUM_ROWS_TO_SAMPLE	main.go	/^const NUM_ROWS_TO_SAMPLE = 2  \/\/ number of columns to sample$/;"	c
NUM_SAMPLE_COPIES	main.go	/^const NUM_SAMPLE_COPIES = 1$/;"	c
Neighbor	neighbor.go	/^type Neighbor struct {$/;"	t
NewBlock	sample/block.go	/^func NewBlock(id int, numRows int, numCols int, netSize int) *Block {$/;"	f
NewNeighbour	neighbor.go	/^func NewNeighbour(nick string, id_s string, addr ma.Multiaddr, role string, isEvil bool, ip string, port int) *Neighbor {$/;"	f
NewPeerStreamManager	stream.go	/^func NewPeerStreamManager(nick string, role string, h host.Host, my_multiaddr string, proto string, openConnections int, timeout time.Duration) *PeerStreamManager {$/;"	f
NewSample	sample/sample.go	/^func NewSample(blockID int, row, column int, b *Block) *Sample {$/;"	f
NewSearchTable	searchtable.go	/^func NewSearchTable(myself *Neighbor) *SearchTable {$/;"	f
NewStorage	storage.go	/^func NewStorage() *Storage {$/;"	f
ParcelLog	metrics.go	/^type ParcelLog struct {$/;"	t
PeerStreamManager	stream.go	/^type PeerStreamManager struct {$/;"	t
Ping	message.go	/^    Ping$/;"	c
PrintTimeSpentOnMutexes	storage.go	/^func (s *Storage) PrintTimeSpentOnMutexes() string {$/;"	f
ProtoMessage	protobuf/message.pb.go	/^func (*Message) ProtoMessage() {}$/;"	f
ProtoReflect	protobuf/message.pb.go	/^func (x *Message) ProtoReflect() protoreflect.Message {$/;"	f
Pub	header.go	/^type Pub struct {$/;"	t
RandomSamplesReceived	storage.go	/^func (s *Storage) RandomSamplesReceived(samples []int) {$/;"	f
RemoveExpired	searchtable.go	/^func (st *SearchTable) RemoveExpired(ttl time.Duration) {$/;"	f
Reset	protobuf/message.pb.go	/^func (x *Message) Reset() {$/;"	f
Sample	sample/sample.go	/^type Sample struct {$/;"	t
SampleNumberByColumn	sample/sample.go	/^func (s *Sample) SampleNumberByColumn() int {$/;"	f
SampleNumberByRow	sample/sample.go	/^func (s *Sample) SampleNumberByRow() int {$/;"	f
SamplesReceived	storage.go	/^func (s *Storage) SamplesReceived(samples []int) {$/;"	f
SamplesWanted	storage.go	/^func (s *Storage) SamplesWanted(samples []*sample.Sample) {$/;"	f
SamplingFinished	logging.go	/^	SamplingFinished$/;"	c
SamplingRequest	message.go	/^    SamplingRequest MessageType = iota$/;"	c
SamplingResponse	message.go	/^    SamplingResponse$/;"	c
SearchTable	searchtable.go	/^type SearchTable struct {$/;"	t
SeedSamplesReceived	storage.go	/^func (s *Storage) SeedSamplesReceived(samples []int) {$/;"	f
SeedingRequest	message.go	/^    SeedingRequest$/;"	c
SeedingResponse	message.go	/^    SeedingResponse$/;"	c
SetPendingRequestsMap	storage.go	/^func (s *Storage) SetPendingRequestsMap(streamManager *PeerStreamManager, newMap map[string]map[int]MessageType) {$/;"	f
SetSamplesIHave	storage.go	/^func (s *Storage) SetSamplesIHave(ih map[int]struct{}) {$/;"	f
SetSamplesIMiss	storage.go	/^func (s *Storage) SetSamplesIMiss(im map[int]struct{}) {$/;"	f
SetUnhostedSamples	storage.go	/^func (s *Storage) SetUnhostedSamples(uh map[int]struct{}) {$/;"	f
Storage	storage.go	/^type Storage struct {$/;"	t
String	message.go	/^func (m *Message) String() string {$/;"	f
String	message.go	/^func (me MessageType) String() string {$/;"	f
String	neighbor.go	/^func (n *Neighbor) String() string {$/;"	f
String	protobuf/message.pb.go	/^func (x *Message) String() string {$/;"	f
UpdateLastSeen	neighbor.go	/^func (n *Neighbor) UpdateLastSeen() {$/;"	f
VOTING_DEADLINE	main.go	/^const VOTING_DEADLINE = 4$/;"	c
WriteMessageGlobalCSV	metrics.go	/^func (m *MessageGlobalMetrics) WriteMessageGlobalCSV() {$/;"	f
_	protobuf/message.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c
_	protobuf/message.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c
addEvent	main.go	/^func addEvent(event string) {$/;"	f
addStream	stream.go	/^func (pm *PeerStreamManager) addStream(peerID peer.ID, stream network.Stream) {$/;"	f
add_time	experiment_launch.py	/^def add_time(original_time, hours=0, minutes=0, seconds=0):$/;"	f
aggressivness	fetch_samples.go	/^var aggressivness int$/;"	v
blockID	main.go	/^var blockID int = -1$/;"	v
calculateUnhostedSamples	node.go	/^func calculateUnhostedSamples(myID *big.Int) {$/;"	f
computeID	sample/sample.go	/^func (s *Sample) computeID() {$/;"	f
computePeerToSamples	node.go	/^func computePeerToSamples(ownId *big.Int, peers map[string]*Neighbor, radiusValidator *big.Int, radiusRegular *big.Int) {$/;"	f
config	main.go	/^var config Config$/;"	v
connectToPeer	node.go	/^func connectToPeer(ctx context.Context, host host.Host, peerAddress string) {$/;"	f
console	experiment_launch.py	/^console = Console()$/;"	v
countValidators	node.go	/^func countValidators(filename string, myNick string) map[string]int {$/;"	f
createMessageParse	message.go	/^func createMessageParse(senderID string, sampleIDsByRow []int, sampleNum int, peers []string, messageType MessageType) []byte {$/;"	f
createUDPMessage	message.go	/^func createUDPMessage(senderID string, blockID int, sampleIDsByRow []int, sampleNum int, peers []string, messageType MessageType) []byte {$/;"	f
currBlock	main.go	/^var currBlock *sample.Block = nil$/;"	v
defaultNick	main.go	/^func defaultNick(p peer.ID) string {$/;"	f
doRegularSampling	regular.go	/^func doRegularSampling(streamManager *PeerStreamManager, blockID int, nghbrs map[string]*Neighbor) {$/;"	f
doValidatorSampling	validator.go	/^func doValidatorSampling(blockID int) {$/;"	f
eventMutex	main.go	/^var eventMutex sync.Mutex$/;"	v
events	main.go	/^var events []string$/;"	v
extract_ip_port	python/process_logs.py	/^def extract_ip_port(line):$/;"	f
fetch_samples	fetch_samples.go	/^func fetch_samples(block *sample.Block, s *Storage, peers map[string]*Neighbor, messageType MessageType) {$/;"	f
file_message_proto_depIdxs	protobuf/message.pb.go	/^var file_message_proto_depIdxs = []int32{$/;"	v
file_message_proto_goTypes	protobuf/message.pb.go	/^var file_message_proto_goTypes = []interface{}{$/;"	v
file_message_proto_init	protobuf/message.pb.go	/^func file_message_proto_init() {$/;"	f
file_message_proto_msgTypes	protobuf/message.pb.go	/^var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v
file_message_proto_rawDesc	protobuf/message.pb.go	/^var file_message_proto_rawDesc = []byte{$/;"	v
file_message_proto_rawDescData	protobuf/message.pb.go	/^	file_message_proto_rawDescData = file_message_proto_rawDesc$/;"	v
file_message_proto_rawDescGZIP	protobuf/message.pb.go	/^func file_message_proto_rawDescGZIP() []byte {$/;"	f
file_message_proto_rawDescOnce	protobuf/message.pb.go	/^	file_message_proto_rawDescOnce sync.Once$/;"	v
formatJSONLogEvent	logging.go	/^func formatJSONLogEvent(eventType EventCode, blockId int) string {$/;"	f
formatJSONLogMessageCount	logging.go	/^func formatJSONLogMessageCount(messageCount int, blockId int) string {$/;"	f
formatJSONLogMessageReceive	logging.go	/^func formatJSONLogMessageReceive(m Message) string {$/;"	f
formatJSONLogMessageSend	logging.go	/^func formatJSONLogMessageSend(m *Message) string {$/;"	f
generateTemporaryPeerID	node.go	/^func generateTemporaryPeerID(ip string, port int) (peer.ID, error) {$/;"	f
getBestPeerToAsk	fetch_samples.go	/^func getBestPeerToAsk(block *sample.Block, s *Storage, peers map[string]*Neighbor, samplesBeingFetchedFrom map[int]map[string]struct{}, askedNodes map[string]struct{}) (*Neighbor, int, []int) {$/;"	f
getPeerScore	fetch_samples.go	/^func getPeerScore(peer *Neighbor, block *sample.Block, s *Storage, peers map[string]*Neighbor, samplesBeingFetchedFrom map[int]map[string]struct{}) (int, []int) {$/;"	f
handleEventsBuilder	builder.go	/^func handleEventsBuilder(exp_duration int, h host.Host, messageChannel <-chan Message, streamManager *PeerStreamManager, ctx context.Context, finished chan bool, LogDirectory string, NickFlag string) {$/;"	f
handleEventsRegular	regular.go	/^func handleEventsRegular(exp_duration int, h host.Host, messageChannel <-chan Message, streamManager *PeerStreamManager, ctx context.Context, finished chan bool, LogDirectory string, NickFlag string) {$/;"	f
handleEventsValidator	validator.go	/^func handleEventsValidator(exp_duration int, h host.Host, messageChannel <-chan Message, streamManager *PeerStreamManager, ctx context.Context, finished chan bool, LogDirectory string, NickFlag string) {$/;"	f
handleMessageUDP	message.go	/^func handleMessageUDP(data []byte, messageChannel chan<- Message) {$/;"	f
handleStream	node.go	/^func handleStream(s network.Stream, messageChannel chan<- Message) {$/;"	f
headerBufSize	header.go	/^const headerBufSize = 128$/;"	c
headerSize	header.go	/^var headerSize = 512 \/\/bytes$/;"	v
init	protobuf/message.pb.go	/^func init() { file_message_proto_init() }$/;"	f
init	sample/block.go	/^func init() {$/;"	f
initSendMutex	stream.go	/^func (pm *PeerStreamManager) initSendMutex(peerID peer.ID) {$/;"	f
keyCreation	experiment_launch.py	/^def keyCreation(ip_list, partition, role, nodes_file, key_directory, login):$/;"	f
lockSendMutex	stream.go	/^func (pm *PeerStreamManager) lockSendMutex(peerID peer.ID) {$/;"	f
log_directory	python/process_logs.py	/^    log_directory = sys.argv[1]$/;"	v
lookupStream	stream.go	/^func (pm *PeerStreamManager) lookupStream(peerID peer.ID) network.Stream {$/;"	f
main	builder.go	/^package main$/;"	p
main	experiment_launch.py	/^def main():$/;"	f
main	fetch_samples.go	/^package main$/;"	p
main	header.go	/^package main$/;"	p
main	keygen/key_generator.go	/^func main() {$/;"	f
main	keygen/key_generator.go	/^package main$/;"	p
main	logging.go	/^package main$/;"	p
main	main.go	/^func main() {$/;"	f
main	main.go	/^package main$/;"	p
main	message.go	/^package main$/;"	p
main	metrics.go	/^package main$/;"	p
main	neighbor.go	/^package main$/;"	p
main	node.go	/^package main$/;"	p
main	regular.go	/^package main$/;"	p
main	searchtable.go	/^package main$/;"	p
main	storage.go	/^package main$/;"	p
main	stream.go	/^package main$/;"	p
main	validator.go	/^package main$/;"	p
makeHost	main.go	/^func makeHost(config Config, ctx context.Context) (host.Host, error) {$/;"	f
makeHostUDP	main.go	/^func makeHostUDP(config Config, ctx context.Context, messageChannel chan<- Message) error {$/;"	f
myUDPAddr	main.go	/^var myUDPAddr string = ""$/;"	v
myself	main.go	/^var myself *Neighbor$/;"	v
node_partition	experiment_launch.py	/^def node_partition(nb_cluster_machine, network_size, nb_builder, prop_validator):$/;"	f
onBuilderSeedResponse	validator.go	/^func onBuilderSeedResponse(msg Message) {$/;"	f
onSeedRequest	builder.go	/^func onSeedRequest(streamManager *PeerStreamManager, msg Message) {$/;"	f
onValidatorSeedResponse	regular.go	/^func onValidatorSeedResponse(msg Message) {$/;"	f
parseIPPort	message.go	/^func parseIPPort(address string) (string, int, error) {$/;"	f
parse_timestamp	python/process_logs.py	/^def parse_timestamp(timestamp):$/;"	f
peerToSamples	main.go	/^var peerToSamples = make(map[string][]int)$/;"	v
peerToSamplesBigInt	main.go	/^var peerToSamplesBigInt = make(map[string][]big.Int)$/;"	v
pingRandomPeers	node.go	/^func pingRandomPeers(streamManager *PeerStreamManager) {$/;"	f
processMessageBuilder	builder.go	/^func processMessageBuilder(streamManager *PeerStreamManager, msg Message) int {$/;"	f
processMessageRegular	regular.go	/^func processMessageRegular(streamManager *PeerStreamManager, msg Message, blockID int, msgcount int) {$/;"	f
processMessageValidator	validator.go	/^func processMessageValidator(streamManager *PeerStreamManager, msg Message, msgcount int) {$/;"	f
process_logs	python/process_logs.py	/^def process_logs(log_dir):$/;"	f
protobuf	protobuf/message.pb.go	/^package protobuf$/;"	p
randomSamplingStarted	main.go	/^var randomSamplingStarted bool = false$/;"	v
readLoop	header.go	/^func (p *Pub) readLoop() {$/;"	f
readMessage	message.go	/^func readMessage(message Message) {$/;"	f
readPeersFromFile	node.go	/^func readPeersFromFile(filename string) []*Neighbor {$/;"	f
removeElementByValue	regular.go	/^func removeElementByValue(slice []big.Int, valueToRemove big.Int) []big.Int {$/;"	f
removeStream	stream.go	/^func (pm *PeerStreamManager) removeStream(peerID peer.ID) {$/;"	f
requestSamples	fetch_samples.go	/^func requestSamples(blockID int, s *Storage, peer *Neighbor, samplesToRequest []int, messageType MessageType) {$/;"	f
respondToPendingRequests	validator.go	/^func respondToPendingRequests(streamManager *PeerStreamManager, blockID int) {$/;"	f
s	main.go	/^var s = NewStorage()$/;"	v
sample	sample/block.go	/^package sample$/;"	p
sample	sample/sample.go	/^package sample$/;"	p
sampleCacheByColumn	main.go	/^var sampleCacheByColumn map[string]*sample.Sample$/;"	v
sampleCacheByRow	main.go	/^var sampleCacheByRow map[string]*sample.Sample$/;"	v
sampleSize	message.go	/^const sampleSize = 56; \/\/1 \/\/in bytes$/;"	c
searchTable	main.go	/^var searchTable *SearchTable$/;"	v
seconds_to_hh_mm_ss	experiment_launch.py	/^def seconds_to_hh_mm_ss(seconds):$/;"	f
seedSamplesPush	builder.go	/^func seedSamplesPush(blockID int) {$/;"	f
sendMessage	stream.go	/^func (pm *PeerStreamManager) sendMessage(stream network.Stream, msg []byte, peerID peer.ID) error {$/;"	f
sendMessageToPeer	stream.go	/^func (pm *PeerStreamManager) sendMessageToPeer(msg []byte, peerInfo *peer.AddrInfo) {$/;"	f
sendSamplesToValidator	builder.go	/^func sendSamplesToValidator(streamManager *PeerStreamManager, peer *Neighbor) {$/;"	f
sendUDPMessageToPeer	message.go	/^func sendUDPMessageToPeer(msg []byte, ip string, port int) error {$/;"	f
sendUDPMessages	message.go	/^func sendUDPMessages(messages [][]byte, ip string, port int) error {$/;"	f
sendUDPRequests	message.go	/^func sendUDPRequests(blockID int, sampleIDsByRow [] int, messageType MessageType, dstIp string, dstPort int) error {$/;"	f
sendUDPSamples	message.go	/^func sendUDPSamples(blockID int, sampleIDsByRow []int, sampleNum int, peers []string, messageType MessageType, destAddr string) error {$/;"	f
shortID	main.go	/^func shortID(p peer.ID) string {$/;"	f
startSeedingFromValidators	regular.go	/^func startSeedingFromValidators(streamManager *PeerStreamManager) {$/;"	f
unlockSendMutex	stream.go	/^func (pm *PeerStreamManager) unlockSendMutex(peerID peer.ID) {$/;"	f
validatorOnSamplingRequest	validator.go	/^func validatorOnSamplingRequest(streamManager *PeerStreamManager, msg Message, messageType MessageType) {$/;"	f
validatorOnSamplingResponse	validator.go	/^func validatorOnSamplingResponse(msg Message, msgCount int, blockId int) {$/;"	f
validatorPositions	main.go	/^var validatorPositions map[string]int$/;"	v
writeBinaryData	node.go	/^func writeBinaryData(writer *bufio.Writer, data []byte) error {$/;"	f
